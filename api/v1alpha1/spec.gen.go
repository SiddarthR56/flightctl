// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
