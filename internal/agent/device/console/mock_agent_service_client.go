// Code generated by MockGen. DO NOT EDIT.
// Source: api/grpc/v1/agent_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=api/grpc/v1/agent_grpc.pb.go -destination=internal/agent/device/console/mock_agent_service_client.go -package=console
//

// Package console is a generated GoMock package.
package console

import (
	context "context"
	reflect "reflect"

	grpc_v1 "github.com/flightctl/flightctl/api/grpc/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockEnrollmentServiceClient is a mock of EnrollmentServiceClient interface.
type MockEnrollmentServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockEnrollmentServiceClientMockRecorder
}

// MockEnrollmentServiceClientMockRecorder is the mock recorder for MockEnrollmentServiceClient.
type MockEnrollmentServiceClientMockRecorder struct {
	mock *MockEnrollmentServiceClient
}

// NewMockEnrollmentServiceClient creates a new mock instance.
func NewMockEnrollmentServiceClient(ctrl *gomock.Controller) *MockEnrollmentServiceClient {
	mock := &MockEnrollmentServiceClient{ctrl: ctrl}
	mock.recorder = &MockEnrollmentServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnrollmentServiceClient) EXPECT() *MockEnrollmentServiceClientMockRecorder {
	return m.recorder
}

// GetEnrollment mocks base method.
func (m *MockEnrollmentServiceClient) GetEnrollment(ctx context.Context, in *grpc_v1.GetEnrollmentRequest, opts ...grpc.CallOption) (*grpc_v1.GetEnrollmentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnrollment", varargs...)
	ret0, _ := ret[0].(*grpc_v1.GetEnrollmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnrollment indicates an expected call of GetEnrollment.
func (mr *MockEnrollmentServiceClientMockRecorder) GetEnrollment(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnrollment", reflect.TypeOf((*MockEnrollmentServiceClient)(nil).GetEnrollment), varargs...)
}

// RequestEnrollment mocks base method.
func (m *MockEnrollmentServiceClient) RequestEnrollment(ctx context.Context, in *grpc_v1.EnrollmentRequest, opts ...grpc.CallOption) (*grpc_v1.EnrollmentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestEnrollment", varargs...)
	ret0, _ := ret[0].(*grpc_v1.EnrollmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestEnrollment indicates an expected call of RequestEnrollment.
func (mr *MockEnrollmentServiceClientMockRecorder) RequestEnrollment(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestEnrollment", reflect.TypeOf((*MockEnrollmentServiceClient)(nil).RequestEnrollment), varargs...)
}

// MockEnrollmentServiceServer is a mock of EnrollmentServiceServer interface.
type MockEnrollmentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockEnrollmentServiceServerMockRecorder
}

// MockEnrollmentServiceServerMockRecorder is the mock recorder for MockEnrollmentServiceServer.
type MockEnrollmentServiceServerMockRecorder struct {
	mock *MockEnrollmentServiceServer
}

// NewMockEnrollmentServiceServer creates a new mock instance.
func NewMockEnrollmentServiceServer(ctrl *gomock.Controller) *MockEnrollmentServiceServer {
	mock := &MockEnrollmentServiceServer{ctrl: ctrl}
	mock.recorder = &MockEnrollmentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnrollmentServiceServer) EXPECT() *MockEnrollmentServiceServerMockRecorder {
	return m.recorder
}

// GetEnrollment mocks base method.
func (m *MockEnrollmentServiceServer) GetEnrollment(arg0 context.Context, arg1 *grpc_v1.GetEnrollmentRequest) (*grpc_v1.GetEnrollmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnrollment", arg0, arg1)
	ret0, _ := ret[0].(*grpc_v1.GetEnrollmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnrollment indicates an expected call of GetEnrollment.
func (mr *MockEnrollmentServiceServerMockRecorder) GetEnrollment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnrollment", reflect.TypeOf((*MockEnrollmentServiceServer)(nil).GetEnrollment), arg0, arg1)
}

// RequestEnrollment mocks base method.
func (m *MockEnrollmentServiceServer) RequestEnrollment(arg0 context.Context, arg1 *grpc_v1.EnrollmentRequest) (*grpc_v1.EnrollmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestEnrollment", arg0, arg1)
	ret0, _ := ret[0].(*grpc_v1.EnrollmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestEnrollment indicates an expected call of RequestEnrollment.
func (mr *MockEnrollmentServiceServerMockRecorder) RequestEnrollment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestEnrollment", reflect.TypeOf((*MockEnrollmentServiceServer)(nil).RequestEnrollment), arg0, arg1)
}

// mustEmbedUnimplementedEnrollmentServiceServer mocks base method.
func (m *MockEnrollmentServiceServer) mustEmbedUnimplementedEnrollmentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEnrollmentServiceServer")
}

// mustEmbedUnimplementedEnrollmentServiceServer indicates an expected call of mustEmbedUnimplementedEnrollmentServiceServer.
func (mr *MockEnrollmentServiceServerMockRecorder) mustEmbedUnimplementedEnrollmentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEnrollmentServiceServer", reflect.TypeOf((*MockEnrollmentServiceServer)(nil).mustEmbedUnimplementedEnrollmentServiceServer))
}

// MockUnsafeEnrollmentServiceServer is a mock of UnsafeEnrollmentServiceServer interface.
type MockUnsafeEnrollmentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeEnrollmentServiceServerMockRecorder
}

// MockUnsafeEnrollmentServiceServerMockRecorder is the mock recorder for MockUnsafeEnrollmentServiceServer.
type MockUnsafeEnrollmentServiceServerMockRecorder struct {
	mock *MockUnsafeEnrollmentServiceServer
}

// NewMockUnsafeEnrollmentServiceServer creates a new mock instance.
func NewMockUnsafeEnrollmentServiceServer(ctrl *gomock.Controller) *MockUnsafeEnrollmentServiceServer {
	mock := &MockUnsafeEnrollmentServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeEnrollmentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeEnrollmentServiceServer) EXPECT() *MockUnsafeEnrollmentServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedEnrollmentServiceServer mocks base method.
func (m *MockUnsafeEnrollmentServiceServer) mustEmbedUnimplementedEnrollmentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEnrollmentServiceServer")
}

// mustEmbedUnimplementedEnrollmentServiceServer indicates an expected call of mustEmbedUnimplementedEnrollmentServiceServer.
func (mr *MockUnsafeEnrollmentServiceServerMockRecorder) mustEmbedUnimplementedEnrollmentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEnrollmentServiceServer", reflect.TypeOf((*MockUnsafeEnrollmentServiceServer)(nil).mustEmbedUnimplementedEnrollmentServiceServer))
}

// MockHealthCheckServiceClient is a mock of HealthCheckServiceClient interface.
type MockHealthCheckServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckServiceClientMockRecorder
}

// MockHealthCheckServiceClientMockRecorder is the mock recorder for MockHealthCheckServiceClient.
type MockHealthCheckServiceClientMockRecorder struct {
	mock *MockHealthCheckServiceClient
}

// NewMockHealthCheckServiceClient creates a new mock instance.
func NewMockHealthCheckServiceClient(ctrl *gomock.Controller) *MockHealthCheckServiceClient {
	mock := &MockHealthCheckServiceClient{ctrl: ctrl}
	mock.recorder = &MockHealthCheckServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthCheckServiceClient) EXPECT() *MockHealthCheckServiceClientMockRecorder {
	return m.recorder
}

// Heartbeat mocks base method.
func (m *MockHealthCheckServiceClient) Heartbeat(ctx context.Context, in *grpc_v1.HeartBeatRequest, opts ...grpc.CallOption) (*grpc_v1.HeartBeatResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Heartbeat", varargs...)
	ret0, _ := ret[0].(*grpc_v1.HeartBeatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Heartbeat indicates an expected call of Heartbeat.
func (mr *MockHealthCheckServiceClientMockRecorder) Heartbeat(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Heartbeat", reflect.TypeOf((*MockHealthCheckServiceClient)(nil).Heartbeat), varargs...)
}

// MockHealthCheckServiceServer is a mock of HealthCheckServiceServer interface.
type MockHealthCheckServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckServiceServerMockRecorder
}

// MockHealthCheckServiceServerMockRecorder is the mock recorder for MockHealthCheckServiceServer.
type MockHealthCheckServiceServerMockRecorder struct {
	mock *MockHealthCheckServiceServer
}

// NewMockHealthCheckServiceServer creates a new mock instance.
func NewMockHealthCheckServiceServer(ctrl *gomock.Controller) *MockHealthCheckServiceServer {
	mock := &MockHealthCheckServiceServer{ctrl: ctrl}
	mock.recorder = &MockHealthCheckServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthCheckServiceServer) EXPECT() *MockHealthCheckServiceServerMockRecorder {
	return m.recorder
}

// Heartbeat mocks base method.
func (m *MockHealthCheckServiceServer) Heartbeat(arg0 context.Context, arg1 *grpc_v1.HeartBeatRequest) (*grpc_v1.HeartBeatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Heartbeat", arg0, arg1)
	ret0, _ := ret[0].(*grpc_v1.HeartBeatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Heartbeat indicates an expected call of Heartbeat.
func (mr *MockHealthCheckServiceServerMockRecorder) Heartbeat(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Heartbeat", reflect.TypeOf((*MockHealthCheckServiceServer)(nil).Heartbeat), arg0, arg1)
}

// mustEmbedUnimplementedHealthCheckServiceServer mocks base method.
func (m *MockHealthCheckServiceServer) mustEmbedUnimplementedHealthCheckServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedHealthCheckServiceServer")
}

// mustEmbedUnimplementedHealthCheckServiceServer indicates an expected call of mustEmbedUnimplementedHealthCheckServiceServer.
func (mr *MockHealthCheckServiceServerMockRecorder) mustEmbedUnimplementedHealthCheckServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedHealthCheckServiceServer", reflect.TypeOf((*MockHealthCheckServiceServer)(nil).mustEmbedUnimplementedHealthCheckServiceServer))
}

// MockUnsafeHealthCheckServiceServer is a mock of UnsafeHealthCheckServiceServer interface.
type MockUnsafeHealthCheckServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeHealthCheckServiceServerMockRecorder
}

// MockUnsafeHealthCheckServiceServerMockRecorder is the mock recorder for MockUnsafeHealthCheckServiceServer.
type MockUnsafeHealthCheckServiceServerMockRecorder struct {
	mock *MockUnsafeHealthCheckServiceServer
}

// NewMockUnsafeHealthCheckServiceServer creates a new mock instance.
func NewMockUnsafeHealthCheckServiceServer(ctrl *gomock.Controller) *MockUnsafeHealthCheckServiceServer {
	mock := &MockUnsafeHealthCheckServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeHealthCheckServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeHealthCheckServiceServer) EXPECT() *MockUnsafeHealthCheckServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedHealthCheckServiceServer mocks base method.
func (m *MockUnsafeHealthCheckServiceServer) mustEmbedUnimplementedHealthCheckServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedHealthCheckServiceServer")
}

// mustEmbedUnimplementedHealthCheckServiceServer indicates an expected call of mustEmbedUnimplementedHealthCheckServiceServer.
func (mr *MockUnsafeHealthCheckServiceServerMockRecorder) mustEmbedUnimplementedHealthCheckServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedHealthCheckServiceServer", reflect.TypeOf((*MockUnsafeHealthCheckServiceServer)(nil).mustEmbedUnimplementedHealthCheckServiceServer))
}

// MockAgentServiceClient is a mock of AgentServiceClient interface.
type MockAgentServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAgentServiceClientMockRecorder
}

// MockAgentServiceClientMockRecorder is the mock recorder for MockAgentServiceClient.
type MockAgentServiceClientMockRecorder struct {
	mock *MockAgentServiceClient
}

// NewMockAgentServiceClient creates a new mock instance.
func NewMockAgentServiceClient(ctrl *gomock.Controller) *MockAgentServiceClient {
	mock := &MockAgentServiceClient{ctrl: ctrl}
	mock.recorder = &MockAgentServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentServiceClient) EXPECT() *MockAgentServiceClientMockRecorder {
	return m.recorder
}

// GetRenderedSpec mocks base method.
func (m *MockAgentServiceClient) GetRenderedSpec(ctx context.Context, in *grpc_v1.GetRenderedSpecRequest, opts ...grpc.CallOption) (*grpc_v1.GetRenderedSpecResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRenderedSpec", varargs...)
	ret0, _ := ret[0].(*grpc_v1.GetRenderedSpecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRenderedSpec indicates an expected call of GetRenderedSpec.
func (mr *MockAgentServiceClientMockRecorder) GetRenderedSpec(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRenderedSpec", reflect.TypeOf((*MockAgentServiceClient)(nil).GetRenderedSpec), varargs...)
}

// UpdateStatus mocks base method.
func (m *MockAgentServiceClient) UpdateStatus(ctx context.Context, in *grpc_v1.UpdateStatusRequest, opts ...grpc.CallOption) (*grpc_v1.UpdateStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStatus", varargs...)
	ret0, _ := ret[0].(*grpc_v1.UpdateStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockAgentServiceClientMockRecorder) UpdateStatus(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockAgentServiceClient)(nil).UpdateStatus), varargs...)
}

// MockAgentServiceServer is a mock of AgentServiceServer interface.
type MockAgentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAgentServiceServerMockRecorder
}

// MockAgentServiceServerMockRecorder is the mock recorder for MockAgentServiceServer.
type MockAgentServiceServerMockRecorder struct {
	mock *MockAgentServiceServer
}

// NewMockAgentServiceServer creates a new mock instance.
func NewMockAgentServiceServer(ctrl *gomock.Controller) *MockAgentServiceServer {
	mock := &MockAgentServiceServer{ctrl: ctrl}
	mock.recorder = &MockAgentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentServiceServer) EXPECT() *MockAgentServiceServerMockRecorder {
	return m.recorder
}

// GetRenderedSpec mocks base method.
func (m *MockAgentServiceServer) GetRenderedSpec(arg0 context.Context, arg1 *grpc_v1.GetRenderedSpecRequest) (*grpc_v1.GetRenderedSpecResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRenderedSpec", arg0, arg1)
	ret0, _ := ret[0].(*grpc_v1.GetRenderedSpecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRenderedSpec indicates an expected call of GetRenderedSpec.
func (mr *MockAgentServiceServerMockRecorder) GetRenderedSpec(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRenderedSpec", reflect.TypeOf((*MockAgentServiceServer)(nil).GetRenderedSpec), arg0, arg1)
}

// UpdateStatus mocks base method.
func (m *MockAgentServiceServer) UpdateStatus(arg0 context.Context, arg1 *grpc_v1.UpdateStatusRequest) (*grpc_v1.UpdateStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1)
	ret0, _ := ret[0].(*grpc_v1.UpdateStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockAgentServiceServerMockRecorder) UpdateStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockAgentServiceServer)(nil).UpdateStatus), arg0, arg1)
}

// mustEmbedUnimplementedAgentServiceServer mocks base method.
func (m *MockAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAgentServiceServer")
}

// mustEmbedUnimplementedAgentServiceServer indicates an expected call of mustEmbedUnimplementedAgentServiceServer.
func (mr *MockAgentServiceServerMockRecorder) mustEmbedUnimplementedAgentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAgentServiceServer", reflect.TypeOf((*MockAgentServiceServer)(nil).mustEmbedUnimplementedAgentServiceServer))
}

// MockUnsafeAgentServiceServer is a mock of UnsafeAgentServiceServer interface.
type MockUnsafeAgentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAgentServiceServerMockRecorder
}

// MockUnsafeAgentServiceServerMockRecorder is the mock recorder for MockUnsafeAgentServiceServer.
type MockUnsafeAgentServiceServerMockRecorder struct {
	mock *MockUnsafeAgentServiceServer
}

// NewMockUnsafeAgentServiceServer creates a new mock instance.
func NewMockUnsafeAgentServiceServer(ctrl *gomock.Controller) *MockUnsafeAgentServiceServer {
	mock := &MockUnsafeAgentServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAgentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAgentServiceServer) EXPECT() *MockUnsafeAgentServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAgentServiceServer mocks base method.
func (m *MockUnsafeAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAgentServiceServer")
}

// mustEmbedUnimplementedAgentServiceServer indicates an expected call of mustEmbedUnimplementedAgentServiceServer.
func (mr *MockUnsafeAgentServiceServerMockRecorder) mustEmbedUnimplementedAgentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAgentServiceServer", reflect.TypeOf((*MockUnsafeAgentServiceServer)(nil).mustEmbedUnimplementedAgentServiceServer))
}

// MockRouterServiceClient is a mock of RouterServiceClient interface.
type MockRouterServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockRouterServiceClientMockRecorder
}

// MockRouterServiceClientMockRecorder is the mock recorder for MockRouterServiceClient.
type MockRouterServiceClientMockRecorder struct {
	mock *MockRouterServiceClient
}

// NewMockRouterServiceClient creates a new mock instance.
func NewMockRouterServiceClient(ctrl *gomock.Controller) *MockRouterServiceClient {
	mock := &MockRouterServiceClient{ctrl: ctrl}
	mock.recorder = &MockRouterServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouterServiceClient) EXPECT() *MockRouterServiceClientMockRecorder {
	return m.recorder
}

// Stream mocks base method.
func (m *MockRouterServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (grpc_v1.RouterService_StreamClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stream", varargs...)
	ret0, _ := ret[0].(grpc_v1.RouterService_StreamClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stream indicates an expected call of Stream.
func (mr *MockRouterServiceClientMockRecorder) Stream(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockRouterServiceClient)(nil).Stream), varargs...)
}

// MockRouterService_StreamClient is a mock of RouterService_StreamClient interface.
type MockRouterService_StreamClient struct {
	ctrl     *gomock.Controller
	recorder *MockRouterService_StreamClientMockRecorder
}

// MockRouterService_StreamClientMockRecorder is the mock recorder for MockRouterService_StreamClient.
type MockRouterService_StreamClientMockRecorder struct {
	mock *MockRouterService_StreamClient
}

// NewMockRouterService_StreamClient creates a new mock instance.
func NewMockRouterService_StreamClient(ctrl *gomock.Controller) *MockRouterService_StreamClient {
	mock := &MockRouterService_StreamClient{ctrl: ctrl}
	mock.recorder = &MockRouterService_StreamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouterService_StreamClient) EXPECT() *MockRouterService_StreamClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockRouterService_StreamClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockRouterService_StreamClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockRouterService_StreamClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockRouterService_StreamClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRouterService_StreamClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRouterService_StreamClient)(nil).Context))
}

// Header mocks base method.
func (m *MockRouterService_StreamClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockRouterService_StreamClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockRouterService_StreamClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockRouterService_StreamClient) Recv() (*grpc_v1.StreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*grpc_v1.StreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockRouterService_StreamClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockRouterService_StreamClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockRouterService_StreamClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockRouterService_StreamClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRouterService_StreamClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockRouterService_StreamClient) Send(arg0 *grpc_v1.StreamRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockRouterService_StreamClientMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRouterService_StreamClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockRouterService_StreamClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockRouterService_StreamClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRouterService_StreamClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockRouterService_StreamClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockRouterService_StreamClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockRouterService_StreamClient)(nil).Trailer))
}

// MockRouterServiceServer is a mock of RouterServiceServer interface.
type MockRouterServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockRouterServiceServerMockRecorder
}

// MockRouterServiceServerMockRecorder is the mock recorder for MockRouterServiceServer.
type MockRouterServiceServerMockRecorder struct {
	mock *MockRouterServiceServer
}

// NewMockRouterServiceServer creates a new mock instance.
func NewMockRouterServiceServer(ctrl *gomock.Controller) *MockRouterServiceServer {
	mock := &MockRouterServiceServer{ctrl: ctrl}
	mock.recorder = &MockRouterServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouterServiceServer) EXPECT() *MockRouterServiceServerMockRecorder {
	return m.recorder
}

// Stream mocks base method.
func (m *MockRouterServiceServer) Stream(arg0 grpc_v1.RouterService_StreamServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stream", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stream indicates an expected call of Stream.
func (mr *MockRouterServiceServerMockRecorder) Stream(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockRouterServiceServer)(nil).Stream), arg0)
}

// mustEmbedUnimplementedRouterServiceServer mocks base method.
func (m *MockRouterServiceServer) mustEmbedUnimplementedRouterServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRouterServiceServer")
}

// mustEmbedUnimplementedRouterServiceServer indicates an expected call of mustEmbedUnimplementedRouterServiceServer.
func (mr *MockRouterServiceServerMockRecorder) mustEmbedUnimplementedRouterServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRouterServiceServer", reflect.TypeOf((*MockRouterServiceServer)(nil).mustEmbedUnimplementedRouterServiceServer))
}

// MockUnsafeRouterServiceServer is a mock of UnsafeRouterServiceServer interface.
type MockUnsafeRouterServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeRouterServiceServerMockRecorder
}

// MockUnsafeRouterServiceServerMockRecorder is the mock recorder for MockUnsafeRouterServiceServer.
type MockUnsafeRouterServiceServerMockRecorder struct {
	mock *MockUnsafeRouterServiceServer
}

// NewMockUnsafeRouterServiceServer creates a new mock instance.
func NewMockUnsafeRouterServiceServer(ctrl *gomock.Controller) *MockUnsafeRouterServiceServer {
	mock := &MockUnsafeRouterServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeRouterServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeRouterServiceServer) EXPECT() *MockUnsafeRouterServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedRouterServiceServer mocks base method.
func (m *MockUnsafeRouterServiceServer) mustEmbedUnimplementedRouterServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRouterServiceServer")
}

// mustEmbedUnimplementedRouterServiceServer indicates an expected call of mustEmbedUnimplementedRouterServiceServer.
func (mr *MockUnsafeRouterServiceServerMockRecorder) mustEmbedUnimplementedRouterServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRouterServiceServer", reflect.TypeOf((*MockUnsafeRouterServiceServer)(nil).mustEmbedUnimplementedRouterServiceServer))
}

// MockRouterService_StreamServer is a mock of RouterService_StreamServer interface.
type MockRouterService_StreamServer struct {
	ctrl     *gomock.Controller
	recorder *MockRouterService_StreamServerMockRecorder
}

// MockRouterService_StreamServerMockRecorder is the mock recorder for MockRouterService_StreamServer.
type MockRouterService_StreamServerMockRecorder struct {
	mock *MockRouterService_StreamServer
}

// NewMockRouterService_StreamServer creates a new mock instance.
func NewMockRouterService_StreamServer(ctrl *gomock.Controller) *MockRouterService_StreamServer {
	mock := &MockRouterService_StreamServer{ctrl: ctrl}
	mock.recorder = &MockRouterService_StreamServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouterService_StreamServer) EXPECT() *MockRouterService_StreamServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockRouterService_StreamServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRouterService_StreamServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRouterService_StreamServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockRouterService_StreamServer) Recv() (*grpc_v1.StreamRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*grpc_v1.StreamRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockRouterService_StreamServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockRouterService_StreamServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockRouterService_StreamServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockRouterService_StreamServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRouterService_StreamServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockRouterService_StreamServer) Send(arg0 *grpc_v1.StreamResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockRouterService_StreamServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRouterService_StreamServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockRouterService_StreamServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockRouterService_StreamServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockRouterService_StreamServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockRouterService_StreamServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockRouterService_StreamServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRouterService_StreamServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockRouterService_StreamServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockRouterService_StreamServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockRouterService_StreamServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockRouterService_StreamServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockRouterService_StreamServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockRouterService_StreamServer)(nil).SetTrailer), arg0)
}
